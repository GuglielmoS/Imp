package it.unimi.di.fachini.imp.compiler;

import static org.objectweb.asm.Opcodes.ACC_PUBLIC;
import static org.objectweb.asm.Opcodes.ACC_STATIC;
import static org.objectweb.asm.Opcodes.ALOAD;
import static org.objectweb.asm.Opcodes.GETSTATIC;
import static org.objectweb.asm.Opcodes.INVOKESPECIAL;
import static org.objectweb.asm.Opcodes.INVOKEVIRTUAL;
import static org.objectweb.asm.Opcodes.RETURN;
import static org.objectweb.asm.Opcodes.V1_8;
import it.unimi.di.fachini.imp.compiler.ast.Declaration;
import it.unimi.di.fachini.imp.compiler.ast.Statement;

import java.util.List;

import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.MethodVisitor;

public class Program {
	private final List<Declaration> declarations;
	private final List<Statement> statements;
	private final SymbolTable table;
	
	public Program(List<Declaration> declarations, List<Statement> statements, SymbolTable table) {
		this.declarations = declarations;
		this.statements = statements;
		this.table = table;
	}

	public List<Declaration> getDeclarations() {
		return declarations;
	}
	
	public List<Statement> getStatements() {
		return statements;
	}

	public SymbolTable getSymbolTable() {
		return table;
	}
	
	public byte[] compile() {
        // creates a ClassWriter to compile the parsed program
        ClassWriter cw = new ClassWriter(0);
        cw.visit(V1_8, ACC_PUBLIC, "CompiledProg", null, "java/lang/Object", null);

        /*********************************************************************
         * Create the default constructor                                    *
         *********************************************************************/
        
        MethodVisitor mw = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
        mw.visitCode();
        // pushes the 'this' variable
        mw.visitVarInsn(ALOAD, 0);
        // invokes the super class constructor
        mw.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
        mw.visitInsn(RETURN);
        // this code uses a maximum of one stack element and one local variable
        mw.visitMaxs(1, 1);
        mw.visitEnd();

        /*********************************************************************
         * Create the main method                                            *
         *********************************************************************/

        mw = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "main", "([Ljava/lang/String;)V", null, null);

        /*********************************************************************
         * Declare the local variables                                       *
         *********************************************************************/

        // (start from 1 because the main function receives an argument)
        int localVariables = 1;
        for (Declaration decl : declarations) {
        	List<Descriptor> declaredIdentifiers = decl.getDeclaredIdentifiers();
        	for (Descriptor descriptor : declaredIdentifiers) {
        		descriptor.setIndex(localVariables);
        		localVariables++;
        	}
        }

        /*********************************************************************
         * Compile the program statements sequentially                       *
         *********************************************************************/

        for (Statement stmt : statements) {
        	stmt.compile(mw);
        }

        // exit from the main method
        mw.visitInsn(RETURN);

        // define the max stack elements and local variables
        mw.visitMaxs(2, localVariables);
        mw.visitEnd();

        // return the generated bytecode
        return cw.toByteArray();
	}
}
