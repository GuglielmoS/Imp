
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326 (SVN rev 63)
//----------------------------------------------------

package it.unimi.di.fachini.imp.parser;

import it.unimi.di.fachini.imp.compiler.*;
import it.unimi.di.fachini.imp.compiler.ast.*;
import it.unimi.di.fachini.imp.compiler.ast.atom.AtomFactory;
import it.unimi.di.fachini.imp.compiler.ast.arith.ArithOpFactory;
import it.unimi.di.fachini.imp.compiler.ast.conditional.Condition;
import it.unimi.di.fachini.imp.compiler.ast.conditional.ConditionFactory;
import it.unimi.di.fachini.imp.compiler.ast.statement.StatementFactory;
import it.unimi.di.fachini.imp.compiler.ast.statement.io.IOStatementFactory;
import it.unimi.di.fachini.imp.compiler.declaration.Declaration;
import it.unimi.di.fachini.imp.compiler.declaration.DeclarationFactory;
import it.unimi.di.fachini.imp.compiler.error.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150326 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\005" +
    "\000\002\004\005\000\002\005\003\000\002\005\005\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\007\006" +
    "\000\002\010\011\000\002\010\007\000\002\012\007\000" +
    "\002\013\010\000\002\014\013\000\002\014\015\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\004\000\002\017\003\000" +
    "\002\016\005\000\002\020\005\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\004\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\004\000\002\021\004\000" +
    "\002\021\005\000\002\021\004\000\002\022\003\000\002" +
    "\022\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\036\002\ufffd\005\ufffd\026\ufffd\032\ufffd\033" +
    "\ufffd\036\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\050\ufffd\001\002\000\036\002\000\005" +
    "\015\026\024\032\036\033\016\036\017\040\013\041\023" +
    "\042\032\043\022\044\033\045\014\046\007\050\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\050\010\001\002\000\044\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\015\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\025\uffcf\030" +
    "\161\031\uffcf\001\002\000\042\002\ufff2\005\ufff2\026\ufff2" +
    "\027\ufff2\032\ufff2\033\ufff2\036\ufff2\037\ufff2\040\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\044\ufff2\045\ufff2\046\ufff2\050\ufff2" +
    "\001\002\000\040\002\uffff\005\uffff\026\uffff\027\uffff\032" +
    "\uffff\033\uffff\036\uffff\040\uffff\041\uffff\042\uffff\043\uffff" +
    "\044\uffff\045\uffff\046\uffff\050\uffff\001\002\000\004\024" +
    "\155\001\002\000\004\005\154\001\002\000\042\002\ufff0" +
    "\005\ufff0\026\ufff0\027\ufff0\032\ufff0\033\ufff0\036\ufff0\037" +
    "\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0" +
    "\046\ufff0\050\ufff0\001\002\000\004\050\040\001\002\000" +
    "\004\024\144\001\002\000\042\002\ufff1\005\ufff1\026\ufff1" +
    "\027\ufff1\032\ufff1\033\ufff1\036\ufff1\037\ufff1\040\ufff1\041" +
    "\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046\ufff1\050\ufff1" +
    "\001\002\000\042\002\ufff5\005\ufff5\026\ufff5\027\ufff5\032" +
    "\ufff5\033\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5" +
    "\043\ufff5\044\ufff5\045\ufff5\046\ufff5\050\ufff5\001\002\000" +
    "\022\006\060\007\052\014\054\024\061\034\055\035\057" +
    "\047\053\050\010\001\002\000\030\005\015\026\024\036" +
    "\017\040\013\041\023\042\032\043\022\044\033\045\014" +
    "\046\007\050\010\001\002\000\036\005\ufffd\026\ufffd\027" +
    "\ufffd\032\ufffd\033\ufffd\036\ufffd\040\ufffd\041\ufffd\042\ufffd" +
    "\043\ufffd\044\ufffd\045\ufffd\046\ufffd\050\ufffd\001\002\000" +
    "\042\002\ufff4\005\ufff4\026\ufff4\027\ufff4\032\ufff4\033\ufff4" +
    "\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\046\ufff4\050\ufff4\001\002\000\042\002\ufff6" +
    "\005\ufff6\026\ufff6\027\ufff6\032\ufff6\033\ufff6\036\ufff6\037" +
    "\ufff6\040\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6" +
    "\046\ufff6\050\ufff6\001\002\000\042\002\ufff3\005\ufff3\026" +
    "\ufff3\027\ufff3\032\ufff3\033\ufff3\036\ufff3\037\ufff3\040\ufff3" +
    "\041\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\050" +
    "\ufff3\001\002\000\042\002\ufff8\005\ufff8\026\ufff8\027\ufff8" +
    "\032\ufff8\033\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\050\ufff8\001\002" +
    "\000\004\023\113\001\002\000\004\024\047\001\002\000" +
    "\004\051\044\001\002\000\040\002\ufffe\005\ufffe\026\ufffe" +
    "\027\ufffe\032\ufffe\033\ufffe\036\ufffe\040\ufffe\041\ufffe\042" +
    "\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\050\ufffe\001\002" +
    "\000\042\002\ufff7\005\ufff7\026\ufff7\027\ufff7\032\ufff7\033" +
    "\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\045\ufff7\046\ufff7\050\ufff7\001\002\000\004\050" +
    "\040\001\002\000\006\004\041\005\042\001\002\000\006" +
    "\004\ufffa\005\ufffa\001\002\000\004\050\043\001\002\000" +
    "\040\002\ufffc\005\ufffc\026\ufffc\027\ufffc\032\ufffc\033\ufffc" +
    "\036\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045" +
    "\ufffc\046\ufffc\050\ufffc\001\002\000\006\004\ufff9\005\ufff9" +
    "\001\002\000\004\005\uffdf\001\002\000\004\005\046\001" +
    "\002\000\042\002\uffe1\005\uffe1\026\uffe1\027\uffe1\032\uffe1" +
    "\033\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\050\uffe1\001\002\000\004" +
    "\050\050\001\002\000\004\023\051\001\002\000\022\006" +
    "\060\007\052\014\054\024\061\034\055\035\057\047\053" +
    "\050\010\001\002\000\022\006\060\007\052\014\054\024" +
    "\061\034\055\035\057\047\053\050\010\001\002\000\040" +
    "\004\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022\uffdc" +
    "\025\uffdc\031\uffdc\001\002\000\004\050\111\001\002\000" +
    "\022\006\060\007\052\014\054\024\061\034\055\035\057" +
    "\047\053\050\010\001\002\000\040\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\025\uffdb\031\uffdb\001" +
    "\002\000\040\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\011\uffda\012\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021" +
    "\uffda\022\uffda\025\uffda\031\uffda\001\002\000\022\006\060" +
    "\007\052\014\054\024\061\034\055\035\057\047\053\050" +
    "\010\001\002\000\022\006\060\007\052\014\054\024\061" +
    "\034\055\035\057\047\053\050\010\001\002\000\016\004" +
    "\063\006\065\007\067\010\066\011\070\012\064\001\002" +
    "\000\022\006\060\007\052\014\054\024\061\034\055\035" +
    "\057\047\053\050\010\001\002\000\022\006\060\007\052" +
    "\014\054\024\061\034\055\035\057\047\053\050\010\001" +
    "\002\000\022\006\060\007\052\014\054\024\061\034\055" +
    "\035\057\047\053\050\010\001\002\000\022\006\060\007" +
    "\052\014\054\024\061\034\055\035\057\047\053\050\010" +
    "\001\002\000\022\006\060\007\052\014\054\024\061\034" +
    "\055\035\057\047\053\050\010\001\002\000\022\006\060" +
    "\007\052\014\054\024\061\034\055\035\057\047\053\050" +
    "\010\001\002\000\040\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\015\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\uffd5\025\uffd5\031\uffd5\001\002\000\040" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\066\011\070\012" +
    "\064\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\025\uffd7\031\uffd7\001\002\000\040\004\uffd6\005\uffd6\006" +
    "\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\015\uffd6\016\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\025\uffd6\031\uffd6\001" +
    "\002\000\040\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\066" +
    "\011\070\012\064\015\uffd8\016\uffd8\017\uffd8\020\uffd8\021" +
    "\uffd8\022\uffd8\025\uffd8\031\uffd8\001\002\000\040\004\uffd4" +
    "\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\012\uffd4\015" +
    "\uffd4\016\uffd4\017\uffd4\020\uffd4\021\uffd4\022\uffd4\025\uffd4" +
    "\031\uffd4\001\002\000\020\004\077\006\065\007\067\010" +
    "\066\011\070\012\064\025\100\001\002\000\022\006\060" +
    "\007\052\014\054\024\061\034\055\035\057\047\053\050" +
    "\010\001\002\000\030\005\015\026\024\036\017\040\013" +
    "\041\023\042\032\043\022\044\033\045\014\046\007\050" +
    "\010\001\002\000\042\002\uffea\005\uffea\026\uffea\027\uffea" +
    "\032\uffea\033\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042" +
    "\uffea\043\uffea\044\uffea\045\uffea\046\uffea\050\uffea\001\002" +
    "\000\016\006\065\007\067\010\066\011\070\012\064\025" +
    "\103\001\002\000\030\005\015\026\024\036\017\040\013" +
    "\041\023\042\032\043\022\044\033\045\014\046\007\050" +
    "\010\001\002\000\042\002\uffe9\005\uffe9\026\uffe9\027\uffe9" +
    "\032\uffe9\033\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\050\uffe9\001\002" +
    "\000\016\006\065\007\067\010\066\011\070\012\064\025" +
    "\106\001\002\000\040\004\uffd1\005\uffd1\006\uffd1\007\uffd1" +
    "\010\uffd1\011\uffd1\012\uffd1\015\uffd1\016\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\025\uffd1\031\uffd1\001\002\000\040" +
    "\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012" +
    "\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\025\uffd2\031\uffd2\001\002\000\040\004\uffd0\005\uffd0\006" +
    "\065\007\067\010\066\011\070\012\064\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\025\uffd0\031\uffd0\001" +
    "\002\000\040\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9" +
    "\011\uffd9\012\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021" +
    "\uffd9\022\uffd9\025\uffd9\031\uffd9\001\002\000\040\004\uffd3" +
    "\005\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\025\uffd3" +
    "\031\uffd3\001\002\000\022\006\060\007\052\014\054\024" +
    "\061\034\055\035\057\047\053\050\010\001\002\000\016" +
    "\005\115\006\065\007\067\010\066\011\070\012\064\001" +
    "\002\000\042\002\uffef\005\uffef\026\uffef\027\uffef\032\uffef" +
    "\033\uffef\036\uffef\037\uffef\040\uffef\041\uffef\042\uffef\043" +
    "\uffef\044\uffef\045\uffef\046\uffef\050\uffef\001\002\000\036" +
    "\005\015\026\024\027\117\032\036\033\016\036\017\040" +
    "\013\041\023\042\032\043\022\044\033\045\014\046\007" +
    "\050\010\001\002\000\042\002\uffdd\005\uffdd\026\uffdd\027" +
    "\uffdd\032\uffdd\033\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd" +
    "\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\050\uffdd\001" +
    "\002\000\004\040\121\001\002\000\004\024\122\001\002" +
    "\000\022\006\060\007\052\014\054\024\061\034\055\035" +
    "\057\047\053\050\010\001\002\000\004\025\141\001\002" +
    "\000\030\006\065\007\067\010\066\011\070\012\064\015" +
    "\126\016\131\017\132\020\130\021\127\022\125\001\002" +
    "\000\022\006\060\007\052\014\054\024\061\034\055\035" +
    "\057\047\053\050\010\001\002\000\022\006\060\007\052" +
    "\014\054\024\061\034\055\035\057\047\053\050\010\001" +
    "\002\000\022\006\060\007\052\014\054\024\061\034\055" +
    "\035\057\047\053\050\010\001\002\000\022\006\060\007" +
    "\052\014\054\024\061\034\055\035\057\047\053\050\010" +
    "\001\002\000\022\006\060\007\052\014\054\024\061\034" +
    "\055\035\057\047\053\050\010\001\002\000\022\006\060" +
    "\007\052\014\054\024\061\034\055\035\057\047\053\050" +
    "\010\001\002\000\016\006\065\007\067\010\066\011\070" +
    "\012\064\025\uffe8\001\002\000\016\006\065\007\067\010" +
    "\066\011\070\012\064\025\uffe3\001\002\000\016\006\065" +
    "\007\067\010\066\011\070\012\064\025\uffe6\001\002\000" +
    "\016\006\065\007\067\010\066\011\070\012\064\025\uffe7" +
    "\001\002\000\016\006\065\007\067\010\066\011\070\012" +
    "\064\025\uffe4\001\002\000\016\006\065\007\067\010\066" +
    "\011\070\012\064\025\uffe5\001\002\000\042\002\uffeb\005" +
    "\uffeb\026\uffeb\027\uffeb\032\uffeb\033\uffeb\036\uffeb\037\uffeb" +
    "\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\050\uffeb\001\002\000\016\005\143\006\065\007\067" +
    "\010\066\011\070\012\064\001\002\000\042\002\uffe2\005" +
    "\uffe2\026\uffe2\027\uffe2\032\uffe2\033\uffe2\036\uffe2\037\uffe2" +
    "\040\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\050\uffe2\001\002\000\022\006\060\007\052\014\054" +
    "\024\061\034\055\035\057\047\053\050\010\001\002\000" +
    "\004\025\146\001\002\000\030\005\015\026\024\036\017" +
    "\040\013\041\023\042\032\043\022\044\033\045\014\046" +
    "\007\050\010\001\002\000\042\002\uffed\005\uffed\026\uffed" +
    "\027\uffed\032\uffed\033\uffed\036\uffed\037\150\040\uffed\041" +
    "\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046\uffed\050\uffed" +
    "\001\002\000\030\005\015\026\024\036\017\040\013\041" +
    "\023\042\032\043\022\044\033\045\014\046\007\050\010" +
    "\001\002\000\042\002\uffee\005\uffee\026\uffee\027\uffee\032" +
    "\uffee\033\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\046\uffee\050\uffee\001\002\000" +
    "\006\004\041\005\153\001\002\000\040\002\ufffb\005\ufffb" +
    "\026\ufffb\027\ufffb\032\ufffb\033\ufffb\036\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\050\ufffb" +
    "\001\002\000\042\002\uffe0\005\uffe0\026\uffe0\027\uffe0\032" +
    "\uffe0\033\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\045\uffe0\046\uffe0\050\uffe0\001\002\000" +
    "\022\006\060\007\052\014\054\024\061\034\055\035\057" +
    "\047\053\050\010\001\002\000\004\025\157\001\002\000" +
    "\030\005\015\026\024\036\017\040\013\041\023\042\032" +
    "\043\022\044\033\045\014\046\007\050\010\001\002\000" +
    "\042\002\uffec\005\uffec\026\uffec\027\uffec\032\uffec\033\uffec" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\050\uffec\001\002\000\022\006\060" +
    "\007\052\014\054\024\061\034\055\035\057\047\053\050" +
    "\010\001\002\000\016\006\065\007\067\010\066\011\070" +
    "\012\064\031\163\001\002\000\042\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\012\uffce\015\uffce\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\025\uffce\031" +
    "\uffce\001\002\000\004\005\165\001\002\000\042\002\uffde" +
    "\005\uffde\026\uffde\027\uffde\032\uffde\033\uffde\036\uffde\037" +
    "\uffde\040\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde" +
    "\046\uffde\050\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\163\000\006\002\004\003\003\001\001\000\030\004" +
    "\011\006\033\007\027\010\034\012\025\013\020\014\024" +
    "\015\026\016\010\020\017\022\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\141\022\055\001\001\000\026\006\117" +
    "\007\027\010\034\012\025\013\020\014\024\015\026\016" +
    "\010\020\017\022\030\001\001\000\004\003\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\061\022\055\001" +
    "\001\000\006\021\111\022\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\021\107\022\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\106\022\055" +
    "\001\001\000\006\021\104\022\055\001\001\000\002\001" +
    "\001\000\006\021\075\022\055\001\001\000\006\021\074" +
    "\022\055\001\001\000\006\021\073\022\055\001\001\000" +
    "\006\021\072\022\055\001\001\000\006\021\071\022\055" +
    "\001\001\000\006\021\070\022\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\101\022" +
    "\055\001\001\000\026\006\100\007\027\010\034\012\025" +
    "\013\020\014\024\015\026\016\010\020\017\022\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\006\103" +
    "\007\027\010\034\012\025\013\020\014\024\015\026\016" +
    "\010\020\017\022\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\113" +
    "\022\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\011\006\033\007\027\010\034\012\025\013\020" +
    "\014\024\015\026\016\010\020\017\022\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\122\021\123\022\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\137\022\055\001\001\000\006" +
    "\021\136\022\055\001\001\000\006\021\135\022\055\001" +
    "\001\000\006\021\134\022\055\001\001\000\006\021\133" +
    "\022\055\001\001\000\006\021\132\022\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\144" +
    "\021\123\022\055\001\001\000\002\001\001\000\026\006" +
    "\146\007\027\010\034\012\025\013\020\014\024\015\026" +
    "\016\010\020\017\022\030\001\001\000\002\001\001\000" +
    "\026\006\150\007\027\010\034\012\025\013\020\014\024" +
    "\015\026\016\010\020\017\022\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\155\021\123\022\055\001\001\000\002\001" +
    "\001\000\026\006\157\007\027\010\034\012\025\013\020" +
    "\014\024\015\026\016\010\020\017\022\030\001\001\000" +
    "\002\001\001\000\006\021\161\022\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {


	// keep a symbol table
	protected SymbolTable symbolTable = new SymbolTable();

	// keep a list of variables declarations (in the order in which they are defined)
	protected List<Declaration> declarations = new ArrayList<>();

	// utility for declaring variables
	protected Descriptor declareVariable(String ident) {
		if (symbolTable.contains(ident))
			throw new CompilerError("Multiple declaration of: " + ident);
		return symbolTable.addIdent(ident);
	}

	// utility for retrieving a declared variable
	protected Descriptor getVariable(String ident) {
		if (!symbolTable.contains(ident))
			throw new CompilerError("Undeclared identifier: " + ident);	
		return symbolTable.get(ident);
	}

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= seqDeclAndStmts 
            {
              Program RESULT =null;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		List<Statement> stmts = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Program(declarations, stmts, symbolTable); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // seqDeclAndStmts ::= seqDeclAndStmts decl 
            {
              List<Statement> RESULT =null;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> stmts = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
						declarations.add(d);
						RESULT = stmts;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seqDeclAndStmts",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // seqDeclAndStmts ::= seqDeclAndStmts stmt 
            {
              List<Statement> RESULT =null;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> stmts = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
						stmts.add(s);
						RESULT = stmts;
					
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seqDeclAndStmts",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // seqDeclAndStmts ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seqDeclAndStmts",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= VAR identSeq SEMI_COLON 
            {
              Declaration RESULT =null;
		int identifiersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identifiersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Descriptor> identifiers = (List<Descriptor>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = DeclarationFactory.var(identifiers); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= REF identSeq SEMI_COLON 
            {
              Declaration RESULT =null;
		int identifiersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int identifiersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Descriptor> identifiers = (List<Descriptor>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 for (Descriptor id : identifiers)
				id.setRef();
			RESULT = DeclarationFactory.ref(identifiers);
	     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("decl",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // identSeq ::= IDENT 
            {
              List<Descriptor> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				List<Descriptor> identifiers = new ArrayList<>();				
				identifiers.add(declareVariable(id));
				RESULT = identifiers;
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identSeq",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // identSeq ::= identSeq COMMA IDENT 
            {
              List<Descriptor> RESULT =null;
		int identifiersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifiersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Descriptor> identifiers = (List<Descriptor>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
				identifiers.add(declareVariable(id));
				RESULT = identifiers;
			 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identSeq",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= assignment 
            {
              Statement RESULT =null;
		int assignStmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int assignStmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement assignStmt = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = assignStmt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= ifStmt 
            {
              Statement RESULT =null;
		int ifStatementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifStatementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement ifStatement = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ifStatement; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= whileStmt 
            {
              Statement RESULT =null;
		int whileStatementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whileStatementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement whileStatement = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = whileStatement; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= doWhileStmt 
            {
              Statement RESULT =null;
		int doWhileStatementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int doWhileStatementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement doWhileStatement = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = doWhileStatement; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= forStmt 
            {
              Statement RESULT =null;
		int forStmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int forStmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement forStmt = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = forStmt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= writeStmt 
            {
              Statement RESULT =null;
		int wstmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wstmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement wstmt = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = wstmt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= readStmt 
            {
              Statement RESULT =null;
		int rstmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rstmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement rstmt = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = rstmt; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= block 
            {
              Statement RESULT =null;
		int blockStatementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int blockStatementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement blockStatement = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = blockStatement; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= SEMI_COLON 
            {
              Statement RESULT =null;
		 RESULT = StatementFactory.nop(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // assignment ::= variable ASSIGNTO expr SEMI_COLON 
            {
              Statement RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = StatementFactory.assign(var, e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ifStmt ::= IF OPEN_PAREN condition CLOSE_PAREN stmt ELSE stmt 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Condition cond = (Condition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int consequentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int consequentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement consequent = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int alternativeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int alternativeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement alternative = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = StatementFactory.ifStmt(cond, consequent, alternative); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ifStmt ::= IF OPEN_PAREN condition CLOSE_PAREN stmt 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Condition cond = (Condition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int consequentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int consequentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement consequent = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = StatementFactory.ifStmt(cond, consequent); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifStmt",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // whileStmt ::= WHILE OPEN_PAREN condition CLOSE_PAREN stmt 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Condition cond = (Condition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = StatementFactory.whileStmt(cond, body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whileStmt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // doWhileStmt ::= DO stmt WHILE OPEN_PAREN condition CLOSE_PAREN 
            {
              Statement RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Condition cond = (Condition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = StatementFactory.doWhileStmt(body, cond); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("doWhileStmt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // forStmt ::= FOR OPEN_PAREN IDENT ASSIGNTO expr COMMA expr CLOSE_PAREN stmt 
            {
              Statement RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr start = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr end = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = StatementFactory.forStmt(body, getVariable(ident), start, end); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // forStmt ::= FOR OPEN_PAREN IDENT ASSIGNTO expr COMMA expr COMMA expr CLOSE_PAREN stmt 
            {
              Statement RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expr start = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expr end = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stepleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stepright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr step = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Statement body = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = StatementFactory.forStmt(body, getVariable(ident), start, end, step); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forStmt",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // condition ::= expr LT expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ConditionFactory.lt(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // condition ::= expr LE expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ConditionFactory.le(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condition ::= expr GT expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ConditionFactory.gt(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condition ::= expr GE expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ConditionFactory.ge(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // condition ::= expr EQ expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ConditionFactory.eq(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // condition ::= expr NE expr 
            {
              Condition RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ConditionFactory.ne(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condition",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // writeStmt ::= WRITE expr SEMI_COLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = IOStatementFactory.write(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeStmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // writeStmt ::= WRITEMSG string SEMI_COLON 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = IOStatementFactory.writeMessage(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeStmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // writeStmt ::= WRITELN SEMI_COLON 
            {
              Statement RESULT =null;
		 RESULT = IOStatementFactory.writeMessage("\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("writeStmt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // string ::= STRING 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("string",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // readStmt ::= READ variable SEMI_COLON 
            {
              Statement RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = IOStatementFactory.read(var); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("readStmt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // block ::= OPEN_CURLY_BRACE seqDeclAndStmts ClOSE_CURLY_BRACE 
            {
              Statement RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Statement> statements = (List<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = StatementFactory.block(statements); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= NUM 
            {
              Expr RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = AtomFactory.num(n); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= variable 
            {
              Expr RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Variable var = (Variable)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = var; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= NULL 
            {
              Expr RESULT =null;
		int nullRefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nullRefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nullRef = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = AtomFactory.nullRef(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= SHARP IDENT 
            {
              Expr RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = AtomFactory.arrayLength(getVariable(ident)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ArithOpFactory.add(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ArithOpFactory.sub(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= expr MUL expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ArithOpFactory.mul(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= expr DIV expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ArithOpFactory.div(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= expr MOD expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ArithOpFactory.mod(e1, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= MINUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ArithOpFactory.unaryMinus(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= PLUS expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ArithOpFactory.unaryPlus(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= OPEN_PAREN expr CLOSE_PAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= NEW expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = AtomFactory.newArray(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variable ::= IDENT 
            {
              Variable RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = AtomFactory.var(getVariable(ident)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable ::= IDENT OPEN_SQUARE_BRACKET expr CLOSE_SQUARE_BRACKET 
            {
              Variable RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int indexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr index = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = AtomFactory.arrayElem(getVariable(ident), index); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
