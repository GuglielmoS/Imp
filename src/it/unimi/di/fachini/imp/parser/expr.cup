package it.unimi.di.fachini.imp.parser;

import it.unimi.di.fachini.imp.compiler.*;
import it.unimi.di.fachini.imp.compiler.ast.*;
import it.unimi.di.fachini.imp.compiler.ast.atom.AtomFactory;
import it.unimi.di.fachini.imp.compiler.ast.arith.ArithOpFactory;
import it.unimi.di.fachini.imp.compiler.ast.conditional.Condition;
import it.unimi.di.fachini.imp.compiler.ast.conditional.ConditionFactory;
import it.unimi.di.fachini.imp.compiler.ast.statement.StatementFactory;
import it.unimi.di.fachini.imp.compiler.ast.statement.io.IOStatementFactory;
import it.unimi.di.fachini.imp.compiler.declaration.Declaration;
import it.unimi.di.fachini.imp.compiler.declaration.DeclarationFactory;
import it.unimi.di.fachini.imp.compiler.error.*;

import java.util.List;
import java.util.ArrayList;

class Parser;

action code {:
	// keep a symbol table
	protected SymbolTable symbolTable = new SymbolTable();

	// keep a list of variables declarations (in the order in which they are defined)
	protected List<Declaration> declarations = new ArrayList<>();

	// utility for declaring variables
	protected Descriptor declareVariable(String ident) {
		if (symbolTable.contains(ident))
			throw new CompilerError("Multiple declaration of: " + ident);
		return symbolTable.addIdent(ident);
	}

	// utility for retrieving a declared variable
	protected Descriptor getVariable(String ident) {
		if (!symbolTable.contains(ident))
			throw new CompilerError("Undeclared identifier: " + ident);	
		return symbolTable.get(ident);
	}
:}

/*
 * Tokens
 */

// delimiters
terminal COMMA, COLON, SEMI_COLON;
// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, UNARY;
// array operators
terminal SHARP;
// conditionals
terminal EQ, NE, LT, GT, LE, GE;
// assignments
terminal ASSIGNTO;
// parenthesis
terminal OPEN_PAREN, CLOSE_PAREN;
terminal OPEN_CURLY_BRACE, ClOSE_CURLY_BRACE;
terminal OPEN_SQUARE_BRACKET, CLOSE_SQUARE_BRACKET;
// reserved keywords
terminal VAR, REF, NEW, NULL;
terminal IF, ELSE, WHILE, DO, FOR;
terminal WRITE, WRITEMSG, WRITELN, READ;
// atomitc values
terminal Integer NUM;
terminal String IDENT;
terminal String STRING;

/*
 * AST
 */

non terminal Program prog;
non terminal List<Statement> seqDeclAndStmts;
non terminal Declaration decl;
non terminal List<Descriptor> identSeq;
non terminal Statement stmt;
non terminal Statement assignment;
non terminal Statement ifStmt;
non terminal Condition condition;
non terminal Statement whileStmt;
non terminal Statement doWhileStmt;
non terminal Statement forStmt;
non terminal Statement writeStmt;
non terminal Statement readStmt;
non terminal String string;
non terminal Statement block;
non terminal Expr expr;
non terminal Variable variable;

/*
 * Precedence and associativity
 */

precedence left PLUS, MINUS;
precedence left MUL, DIV, MOD;
precedence nonassoc UNARY;

/* productions */

start with prog;

prog ::= seqDeclAndStmts:stmts
		 {: RESULT = new Program(declarations, stmts, symbolTable); :}
	   ;

seqDeclAndStmts ::= seqDeclAndStmts:stmts decl:d
	  				{:
						declarations.add(d);
						RESULT = stmts;
					:}
	  			  | seqDeclAndStmts:stmts stmt:s
					{:  
						stmts.add(s);
						RESULT = stmts;
					:} 
	 	 		  |	// empty
					{: RESULT = new ArrayList<>(); :}
	  			  ;

decl ::= VAR identSeq:identifiers SEMI_COLON
		 {: RESULT = DeclarationFactory.var(identifiers); :}
	   | REF identSeq:identifiers SEMI_COLON
		 {: for (Descriptor id : identifiers)
				id.setRef();
			RESULT = DeclarationFactory.ref(identifiers);
	     :}
	   ;

identSeq ::= IDENT:id
		   	 {:
				List<Descriptor> identifiers = new ArrayList<>();				
				identifiers.add(declareVariable(id));
				RESULT = identifiers;
			 :}
		   | identSeq:identifiers COMMA IDENT:id
		   	 {:
				identifiers.add(declareVariable(id));
				RESULT = identifiers;
			 :}
		   ;

stmt ::= assignment:assignStmt
	   	 {: RESULT = assignStmt; :}
	   | ifStmt:ifStatement
	   	 {: RESULT = ifStatement; :}
	   | whileStmt:whileStatement
	   	 {: RESULT = whileStatement; :}
	   | doWhileStmt:doWhileStatement
	     {: RESULT = doWhileStatement; :}
	   | forStmt:forStmt
	     {: RESULT = forStmt; :}
	   | writeStmt:wstmt
	   	 {: RESULT = wstmt; :}
	   | readStmt:rstmt
	   	 {: RESULT = rstmt; :}
	   | block:blockStatement
	   	 {: RESULT = blockStatement; :}
	   | SEMI_COLON
	   	 {: RESULT = StatementFactory.nop(); :}
	   ;

assignment ::= variable:var ASSIGNTO expr:e SEMI_COLON
			   {: RESULT = StatementFactory.assign(var, e); :}
		 	 ;

ifStmt ::= IF OPEN_PAREN condition:cond CLOSE_PAREN stmt:consequent ELSE stmt:alternative
		   {: RESULT = StatementFactory.ifStmt(cond, consequent, alternative); :}
		 | IF OPEN_PAREN condition:cond CLOSE_PAREN stmt:consequent
		   {: RESULT = StatementFactory.ifStmt(cond, consequent); :}
		 ;

whileStmt ::= WHILE OPEN_PAREN condition:cond CLOSE_PAREN stmt:body
			  {: RESULT = StatementFactory.whileStmt(cond, body); :}
			;

doWhileStmt ::= DO stmt:body WHILE OPEN_PAREN condition:cond CLOSE_PAREN
			  	{: RESULT = StatementFactory.doWhileStmt(body, cond); :}
			  ;

forStmt ::= FOR OPEN_PAREN IDENT:ident ASSIGNTO expr:start COMMA expr:end CLOSE_PAREN stmt:body
		  	{: RESULT = StatementFactory.forStmt(body, getVariable(ident), start, end); :}
		  | FOR OPEN_PAREN IDENT:ident ASSIGNTO expr:start COMMA expr:end COMMA expr:step CLOSE_PAREN stmt:body
		  	{: RESULT = StatementFactory.forStmt(body, getVariable(ident), start, end, step); :}
		  | FOR OPEN_PAREN IDENT:ident COLON IDENT:array CLOSE_PAREN stmt:body
		  	{: RESULT = StatementFactory.forEachStmt(body, getVariable(ident), getVariable(array)); :}
		  ;

condition ::= expr:e1 LT expr:e2
			  {: RESULT = ConditionFactory.lt(e1, e2); :}
			| expr:e1 LE expr:e2
			  {: RESULT = ConditionFactory.le(e1, e2); :}
			| expr:e1 GT expr:e2
			  {: RESULT = ConditionFactory.gt(e1, e2); :}
			| expr:e1 GE expr:e2
			  {: RESULT = ConditionFactory.ge(e1, e2); :}
			| expr:e1 EQ expr:e2
			  {: RESULT = ConditionFactory.eq(e1, e2); :}
			| expr:e1 NE expr:e2
			  {: RESULT = ConditionFactory.ne(e1, e2); :}
			;

writeStmt ::= WRITE expr:e SEMI_COLON
			  {: RESULT = IOStatementFactory.write(e); :}
			| WRITEMSG string:s SEMI_COLON
			  {: RESULT = IOStatementFactory.writeMessage(s); :}
			| WRITELN SEMI_COLON
			  {: RESULT = IOStatementFactory.writeMessage("\n"); :}
			;

string ::= STRING:s {: RESULT = s; :};

readStmt ::= READ variable:var SEMI_COLON
			 {: RESULT = IOStatementFactory.read(var); :}
		   ;

block ::= OPEN_CURLY_BRACE seqDeclAndStmts:statements ClOSE_CURLY_BRACE
		  {: RESULT = StatementFactory.block(statements); :}
		;

expr ::= NUM:n
	   	 {: RESULT = AtomFactory.num(n); :}
	   | variable:var
	   	 {: RESULT = var; :}
	   | NULL:nullRef
	   	 {: RESULT = AtomFactory.nullRef(); :}
	   | SHARP IDENT:ident
	   	 {: RESULT = AtomFactory.arrayLength(getVariable(ident)); :}
	   | expr:e1 PLUS expr:e2
	 	 {: RESULT = ArithOpFactory.add(e1, e2); :}
	   | expr:e1 MINUS expr:e2
	   	 {: RESULT = ArithOpFactory.sub(e1, e2); :}
	   | expr:e1 MUL expr:e2
	   	 {: RESULT = ArithOpFactory.mul(e1, e2); :}
	   | expr:e1 DIV expr:e2
	   	 {: RESULT = ArithOpFactory.div(e1, e2); :}
	   | expr:e1 MOD expr:e2
	   	 {: RESULT = ArithOpFactory.mod(e1, e2); :}
	   | MINUS expr:e
	   	 {: RESULT = ArithOpFactory.unaryMinus(e); :}
	     %prec UNARY
	   | PLUS expr:e
	     {: RESULT = ArithOpFactory.unaryPlus(e); :}
	     %prec UNARY
	   | OPEN_PAREN expr:e CLOSE_PAREN
	     {: RESULT = e; :}
	   | NEW expr:e
	     {: RESULT = AtomFactory.newArray(e); :}
	   ;

variable ::= IDENT:ident
		   	 {: RESULT = AtomFactory.var(getVariable(ident)); :}
		   | IDENT:ident OPEN_SQUARE_BRACKET expr:index CLOSE_SQUARE_BRACKET
		   	 {: RESULT = AtomFactory.arrayElem(getVariable(ident), index); :}
		   ;